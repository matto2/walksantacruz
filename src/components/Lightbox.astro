---
// Lightbox component with vanilla JS and touch swipe support
---

<div id="lightbox" class="lightbox" aria-hidden="true">
	<button class="lightbox-close" aria-label="Close lightbox">&times;</button>
	<button class="lightbox-prev" aria-label="Previous image">&larr;</button>
	<button class="lightbox-next" aria-label="Next image">&rarr;</button>
	<div class="lightbox-content">
		<img src="" alt="" class="lightbox-image" />
		<div class="lightbox-caption"></div>
	</div>
</div>

<style>
	.lightbox {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: rgba(0, 0, 0, 0.95);
		z-index: 9999;
		justify-content: center;
		align-items: center;
	}

	.lightbox[aria-hidden="false"] {
		display: flex;
	}

	.lightbox-content {
		position: relative;
		max-width: 90%;
		max-height: 90%;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
	}

	.lightbox-image {
		max-width: 100%;
		max-height: 80vh;
		object-fit: contain;
		user-select: none;
		-webkit-user-drag: none;
	}

	.lightbox-caption {
		color: white;
		text-align: center;
		padding: 1rem;
		max-width: 600px;
	}

	.lightbox-close,
	.lightbox-prev,
	.lightbox-next {
		position: fixed;
		background: rgba(255, 255, 255, 0.1);
		border: none;
		color: white;
		font-size: 2rem;
		cursor: pointer;
		padding: 1rem;
		transition: background 0.2s;
		z-index: 10000;
	}

	.lightbox-close:hover,
	.lightbox-prev:hover,
	.lightbox-next:hover {
		background: rgba(255, 255, 255, 0.2);
	}

	.lightbox-close {
		top: 1rem;
		right: 1rem;
		width: 3rem;
		height: 3rem;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.lightbox-prev {
		left: 1rem;
		top: 50%;
		transform: translateY(-50%);
		border-radius: 0.5rem;
	}

	.lightbox-next {
		right: 1rem;
		top: 50%;
		transform: translateY(-50%);
		border-radius: 0.5rem;
	}

	@media (max-width: 768px) {
		.lightbox-prev,
		.lightbox-next {
			font-size: 1.5rem;
			padding: 0.5rem;
		}

		.lightbox-close {
			width: 2.5rem;
			height: 2.5rem;
			font-size: 1.5rem;
		}
	}
</style>

<script>
	let currentIndex = 0;
	let images: Array<{ src: string; alt: string; caption: string }> = [];
	let touchStartX = 0;
	let touchEndX = 0;

	function openLightbox(index: number) {
		currentIndex = index;
		updateLightbox();
		const lightbox = document.getElementById('lightbox');
		if (lightbox) {
			lightbox.setAttribute('aria-hidden', 'false');
			document.body.style.overflow = 'hidden';
		}
	}

	function closeLightbox() {
		const lightbox = document.getElementById('lightbox');
		if (lightbox) {
			lightbox.setAttribute('aria-hidden', 'true');
			document.body.style.overflow = '';
		}
	}

	function updateLightbox() {
		const img = document.querySelector('.lightbox-image') as HTMLImageElement;
		const caption = document.querySelector('.lightbox-caption');

		if (img && caption && images[currentIndex]) {
			img.src = images[currentIndex].src;
			img.alt = images[currentIndex].alt;
			caption.textContent = images[currentIndex].caption;
		}
	}

	function nextImage() {
		currentIndex = (currentIndex + 1) % images.length;
		updateLightbox();
	}

	function prevImage() {
		currentIndex = (currentIndex - 1 + images.length) % images.length;
		updateLightbox();
	}

	function handleSwipe() {
		const swipeThreshold = 50;
		const diff = touchStartX - touchEndX;

		if (Math.abs(diff) > swipeThreshold) {
			if (diff > 0) {
				nextImage();
			} else {
				prevImage();
			}
		}
	}

	function initLightbox() {
		// Collect all gallery images
		const galleryImages = document.querySelectorAll('[data-lightbox-img]');
		images = Array.from(galleryImages).map((img: Element) => ({
			src: (img as HTMLImageElement).src,
			alt: (img as HTMLImageElement).alt || '',
			caption: img.getAttribute('data-caption') || ''
		}));

		// Add click handlers to gallery images
		galleryImages.forEach((img, index) => {
			img.addEventListener('click', () => openLightbox(index));
		});

		// Close button
		const closeBtn = document.querySelector('.lightbox-close');
		closeBtn?.addEventListener('click', closeLightbox);

		// Navigation buttons
		const prevBtn = document.querySelector('.lightbox-prev');
		const nextBtn = document.querySelector('.lightbox-next');
		prevBtn?.addEventListener('click', prevImage);
		nextBtn?.addEventListener('click', nextImage);

		// Keyboard navigation
		document.addEventListener('keydown', (e) => {
			const lightbox = document.getElementById('lightbox');
			if (lightbox?.getAttribute('aria-hidden') === 'false') {
				if (e.key === 'Escape') closeLightbox();
				if (e.key === 'ArrowLeft') prevImage();
				if (e.key === 'ArrowRight') nextImage();
			}
		});

		// Touch swipe support
		const lightbox = document.getElementById('lightbox');
		lightbox?.addEventListener('touchstart', (e) => {
			touchStartX = e.changedTouches[0].screenX;
		});

		lightbox?.addEventListener('touchend', (e) => {
			touchEndX = e.changedTouches[0].screenX;
			handleSwipe();
		});

		// Close on background click
		lightbox?.addEventListener('click', (e) => {
			if (e.target === lightbox) {
				closeLightbox();
			}
		});
	}

	// Initialize on load
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initLightbox);
	} else {
		initLightbox();
	}

	// Re-initialize after Astro view transitions
	document.addEventListener('astro:page-load', initLightbox);
</script>
